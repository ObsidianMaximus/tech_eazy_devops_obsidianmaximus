name: Deploy and Verify via SSM

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      - name: Get Running Instance Info
        id: get-instance-info
        run: |
          INSTANCE_DATA=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=techeazy-SSM-Managed-Instance" "Name=instance-state-name,Values=running" \
            --query "Reservations[].Instances[].[InstanceId, PublicIpAddress]" --output text)
          
          echo "INSTANCE_ID=$(echo "$INSTANCE_DATA" | awk '{print $1}')" >> $GITHUB_ENV
          echo "PUBLIC_IP=$(echo "$INSTANCE_DATA" | awk '{print $2}')" >> $GITHUB_ENV

      - name: Execute Deploy Script via SSM
        id: ssm-deploy
        env:
          S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
        run: |
          COMMAND_ID=$(aws ssm send-command \
            --instance-ids "${{ env.INSTANCE_ID }}" \
            --document-name "AWS-RunShellScript" \
            --query "Command.CommandId" \
            --output text \
            --parameters '{
              "commands": [
                "export S3_BUCKET_NAME=\"${{ secrets.S3_BUCKET_NAME }}\",
                "curl -fsSL https://raw.githubusercontent.com/ObsidianMaximus/tech_eazy_devops_obsidianmaximus/master/deploy.sh -o /tmp/deploy.sh",
                "chmod +x /tmp/deploy.sh",
                "/tmp/deploy.sh"
              ]
            }')
          echo "COMMAND_ID=$COMMAND_ID" >> $GITHUB_ENV
          echo "SSM Command sent with ID: $COMMAND_ID"

      - name: Wait for SSM Command to Complete
        run: |
          echo "Waiting for SSM command to complete..."
          aws ssm wait command-executed \
            --command-id "${{ env.COMMAND_ID }}" \
            --instance-id "${{ env.INSTANCE_ID }}"
          
          # Explicitly check the final status
          STATUS=$(aws ssm get-command-invocation \
            --command-id "${{ env.COMMAND_ID }}" \
            --instance-id "${{ env.INSTANCE_ID }}" \
            --query "Status" --output text)

          if [ "$STATUS" != "Success" ]; then
            echo "SSM command execution failed with status: $STATUS"
            # Optional: Get error logs
            aws ssm get-command-invocation --command-id "${{ env.COMMAND_ID }}" --instance-id "${{ env.INSTANCE_ID }}" --query "StandardErrorContent"
            exit 1
          fi
          echo "SSM command executed successfully."

      - name: Health Check Application Endpoint
        run: |
          echo "Waiting for application to become available..."
          for i in {1..15}; do
            # Use -sL to be silent and follow redirects, --fail to exit on HTTP error
            if curl -sL --fail "http://${{ env.PUBLIC_IP }}:80/hello" | grep -q "Hello from Spring MVC!"; then
              echo "Health check PASSED. Application is up and running."
              exit 0
            fi
            echo "Attempt $i/15 failed. Retrying in 10 seconds..."
            sleep 10
          done
          echo "Health check FAILED. The application is not responding correctly."
          exit 1

      - name: Schedule EventBridge rule to stop instance in 30 minutes
        env:
          INSTANCE_ID: ${{ env.INSTANCE_ID }}
        run: |
          AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          RULE_NAME="auto-stop-ec2-${INSTANCE_ID}-$(date +%s)"
          aws events put-rule \
            --name "$RULE_NAME" \
            --schedule-expression "rate(30 minutes)" \
            --state ENABLED \
            --region ap-south-1

          aws events put-targets \
            --rule "$RULE_NAME" \
            --targets "[{\"Id\":\"1\",\"Arn\":\"arn:aws:lambda:ap-south-1:${AWS_ACCOUNT_ID}:function:lambda_function\",\"Input\":\"{\\\"instance_id\\\": \\\"${INSTANCE_ID}\\\"}\"}]" \
            --region ap-south-1

          aws lambda add-permission \
            --function-name "lambda_function" \
            --statement-id "${RULE_NAME}" \
            --action "lambda:InvokeFunction" \
            --principal "events.amazonaws.com" \
            --source-arn "arn:aws:events:ap-south-1:${AWS_ACCOUNT_ID}:rule/${RULE_NAME}" \
            --region ap-south-1